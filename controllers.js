const fs = require("fs").promises;
const fs2 = require("fs");
const emailjs = require("@emailjs/nodejs");
const {
  reviewOptions,
  confirmMenu,
  mainMenu,
  replyServicesMenu,
  skipFeedbackMenu,
} = require("./menus");
const { error } = require("console");

async function handleFeedback(chatId, message, bot) {
  try {
    await bot.sendMessage(
      chatId,
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞",
      reviewOptions
    );
    const ratingResponse = await waitForMessage(bot, chatId);

    if (!ratingResponse.text.includes("‚≠ê")) {
      throw error;
    }

    await bot.sendMessage(
      chatId,
      "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è‚ú®",
      skipFeedbackMenu
    );

    const option = await waitForMessage(bot, chatId);

    if (option.text === "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" || option.text === "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å") {
      let last_name;

      if (typeof message.from.last_name == "undefined")
        last_name = "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
      else last_name = message.from.last_name;

      const dataToAppend = `\n\n–ò–º—è: ${message.from.first_name} –§–∞–º–∏–ª–∏—è: ${last_name}\n\n–û—Ü–µ–Ω–∫–∞: ${ratingResponse.text}`;

      // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
      // await fs.appendFile("reviews.txt", dataToAppend, "utf8");

      var templateParams = {
        subject: "–û—Ç–∑—ã–≤ –∏–∑ telegram –±–æ—Ç–∞",
        message: dataToAppend,
        to: "doctor@131.by",
      };
      emailjs.send("service_25em63k", "template_327vh7g", templateParams).then(
        (response) => {
          console.log("SUCCESS!", response.status, response.text);
        },
        (error) => {
          console.log("FAILED...", error);
        }
      );

      await bot.sendMessage(
        chatId,
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ü§ç. –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ",
        mainMenu
      );
    } else {
      let last_name;

      if (typeof message.from.last_name == "undefined")
        last_name = "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
      else last_name = message.from.last_name;

      const dataToAppend = `\n\n–ò–º—è: ${message.from.first_name} –§–∞–º–∏–ª–∏—è: ${last_name}\n–û—Ü–µ–Ω–∫–∞: ${ratingResponse.text}\n–û—Ç–∑—ã–≤: ${option.text}`;

      // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
      // await fs.appendFile("reviews.txt", dataToAppend, "utf8");

      var templateParams = {
        subject: "–û—Ç–∑—ã–≤ –∏–∑ telegram –±–æ—Ç–∞",
        message: dataToAppend,
        to: "doctor@131.by",
      };

      // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ –≤–∑—è—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–µ—Ä–≤–∏—Å–µ EmailJS(https://www.emailjs.com/)
      emailjs.send("service_25em63k", "template_327vh7g", templateParams).then(
        (response) => {
          console.log("SUCCESS!", response.status, response.text);
        },
        (error) => {
          console.log("FAILED...", error);
        }
      );

      await bot.sendMessage(chatId, "–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ", mainMenu);
    }
  } catch (error) {
    console.error("Error handling question:", error);
    await bot.sendMessage(
      chatId,
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
      mainMenu
    );
  }
}

async function handleQuestion(chatId, bot) {
  try {
    await bot.sendMessage(
      chatId,
      "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤–∞–º –ø–æ–º–æ—á—å‚úçÔ∏è:"
    );
    const questionResponse = await waitForMessage(bot, chatId);

    if (questionResponse.text === "ddkwjdhwkjhwk_-0293-02dwed][") {
      await bot.sendMessage(chatId, "https://ibb.co/tbCpsvn");
    }

    if (
      [
        "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º",
        "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞",
        "üë®‚Äç‚öïÔ∏è –£—Å–ª—É–≥–∏",
        "/start",
      ].includes(questionResponse.text)
    )
      return;

    await bot.sendMessage(
      chatId,
      "–û—Ç–ª–∏—á–Ω–æ!üî• –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    );
    const phoneResponse = await waitForMessage(bot, chatId);
    if (
      [
        "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º",
        "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞",
        "üë®‚Äç‚öïÔ∏è –£—Å–ª—É–≥–∏",
        "/start",
      ].includes(phoneResponse.text)
    )
      return;

    await bot.sendMessage(
      chatId,
      "–°–ø–∞—Å–∏–±–æ!üî•, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É):"
    );
    const emailResponse = await waitForMessage(bot, chatId);
    if (
      [
        "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º",
        "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞",
        "üë®‚Äç‚öïÔ∏è –£—Å–ª—É–≥–∏",
        "/start",
      ].includes(phoneResponse.text)
    )
      return;

    await bot.sendMessage(
      chatId,
      "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!üëå –°–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
    );
    const nameResponse = await waitForMessage(bot, chatId);
    if (
      [
        "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º",
        "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞",
        "üë®‚Äç‚öïÔ∏è –£—Å–ª—É–≥–∏",
        "/start",
      ].includes(nameResponse.text)
    )
      return;

    await bot.sendMessage(
      chatId,
      "–°–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –ª–∏ –≤—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö? üìÅ",
      confirmMenu
    );

    const option = await waitForMessage(bot, chatId);

    if ((await option.text) === "–î–∞" || (await option.text) === "–¥–∞") {
      await bot.sendMessage(
        chatId,
        "–°–ø–∞—Å–∏–±–æ, –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–∞—Ç—å –≤–∞–º –æ—Ç–≤–µ—Ç",
        mainMenu
      );

      const dataToAppend = `\n–í–æ–ø—Ä–æ—Å: ${questionResponse.text}, –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneResponse.text}, –ò–º—è: ${nameResponse.text}, Email: ${emailResponse.text}\n`;

      // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
      // await fs.appendFile("questions.txt", dataToAppend, "utf8");

      var templateParams = {
        subject: "–í–æ–ø—Ä–æ—Å –∏–∑ telegram –±–æ—Ç–∞",
        message: dataToAppend,
        to: "doctor@131.by",
      };

      emailjs.send("service_25em63k", "template_327vh7g", templateParams).then(
        (response) => {
          console.log("SUCCESS!", response.status, response.text);
        },
        (error) => {
          console.log("FAILED...", error);
        }
      );
    } else {
      await bot.sendMessage(
        chatId,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        mainMenu
      );
      return;
    }
  } catch (error) {
    console.error("Error handling question:", error);
    await bot.sendMessage(
      chatId,
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
      mainMenu
    );
  }
}

async function handleRegistration(chatId, messageId, bot) {
  try {
    await bot.sendMessage(
      chatId,
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
      replyServicesMenu
    );

    const servicesResponse = await waitForMessage(bot, chatId);

    if (servicesResponse.text === "/start") return;

    const all = [
      "–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
      "–û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
      "–£–ó–ò",
    ];
    const all_idk = ["–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é"];
    const cancel = ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"];
    const osip = ["–ù–µ–≤—Ä–æ–ª–æ–≥–∏—è", "–¢–µ—Ä–∞–ø–∏—è"];

    let keyboard;
    if (all.includes(servicesResponse.text)) {
      // –µ—Å–ª–∏ —É—Å–ª—É–≥–∞ –≤–æ –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö
      keyboard = [
        [{ text: "üè† –≥. –ú–∏–Ω—Å–∫, –Ø–∫—É–±–∞ –ö–æ–ª–∞—Å–∞, 42" }],
        [{ text: "üè† –≥. –ú–∏–Ω—Å–∫, –ö—Ä–∞—Å–Ω–∞—è, 20" }],
        [{ text: "üè† –≥. –û—Å–∏–ø–æ–≤–∏—á–∏, –°—É–º—á–µ–Ω–∫–æ, 38" }],
      ];
    } else if (osip.includes(servicesResponse.text)) {
      keyboard = [[{ text: "üè† –≥. –û—Å–∏–ø–æ–≤–∏—á–∏, –°—É–º—á–µ–Ω–∫–æ, 38" }]];
    } else if (all_idk.includes(servicesResponse.text)) {
      keyboard = [
        [{ text: "üè† –≥. –ú–∏–Ω—Å–∫, –Ø–∫—É–±–∞ –ö–æ–ª–∞—Å–∞, 42" }],
        [{ text: "üè† –≥. –ú–∏–Ω—Å–∫, –ö—Ä–∞—Å–Ω–∞—è, 20" }],
        [{ text: "üè† –≥. –û—Å–∏–ø–æ–≤–∏—á–∏, –°—É–º—á–µ–Ω–∫–æ, 38" }],
        [{ text: "–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é" }],
      ];
    } else if (cancel.includes(servicesResponse.text)) {
      await bot.sendMessage(chatId, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu);
      return;
    } else {
      keyboard = [[{ text: "üè† –≥. –ú–∏–Ω—Å–∫, –Ø–∫—É–±–∞ –ö–æ–ª–∞—Å–∞, 42" }]];
    }

    const replycontactsMenu = {
      reply_markup: {
        keyboard: keyboard,
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    };

    const emptyMenu = {
      reply_markup: {
        remove_keyboard: true,
      },
    };

    await bot.sendMessage(
      chatId,
      "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–æ—á–∏—Ç–∞–µ–º–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:",
      replycontactsMenu
    );
    const departmentResponse = await waitForMessage(bot, chatId);
    if (departmentResponse.text === "/start") return;

    await bot.sendMessage(
      chatId,
      "–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏?\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n‚úîÔ∏è –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n‚úîÔ∏è –í—Ä–∞—á\n‚úîÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
      emptyMenu
    );

    const commentaryResponse = await waitForMessage(bot, chatId);
    if (commentaryResponse.text === "/start") return;

    await bot.sendMessage(chatId, "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
    const phoneResponse = await waitForMessage(bot, chatId);
    if (phoneResponse.text === "/start") return;

    await bot.sendMessage(chatId, "–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?");
    const nameResponse = await waitForMessage(bot, chatId);
    if (nameResponse.text === "/start") return;

    await bot.sendMessage(
      chatId,
      `–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n–£—Å–ª—É–≥–∞: ${servicesResponse.text}\n–û—Ç–¥–µ–ª–µ–Ω–∏–µ: ${departmentResponse.text}\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${commentaryResponse.text}\n–í–∞—à–µ –∏–º—è: ${nameResponse.text}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phoneResponse.text}\n\n–°–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –ª–∏ –≤—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?`,
      confirmMenu
    );

    const option = await waitForMessage(bot, chatId);

    if ((await option.text) === "–î–∞" || (await option.text) === "–¥–∞") {
      await bot.sendMessage(
        chatId,
        "–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π",
        mainMenu
      );
      const dataToAppend = `–ó–∞–ø–∏—Å—å ${chatId}:\n–£—Å–ª—É–≥–∞: ${servicesResponse.text}\n\–û—Ç–¥–µ–ª–µ–Ω–∏–µ: ${departmentResponse.text}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${commentaryResponse.text}\n–ò–º—è: ${nameResponse.text}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phoneResponse.text}\n\n`;
      // await fs.appendFile("register.txt", dataToAppend, "utf8");

      var templateParams = {
        subject: "–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É –∏–∑ telegram –±–æ—Ç–∞",
        message: dataToAppend,
        to: "doctor@131.by",
      };

      emailjs.send("service_25em63k", "template_327vh7g", templateParams).then(
        (response) => {
          console.log("SUCCESS!", response.status, response.text);
        },
        (error) => {
          console.log("FAILED...", error);
        }
      );
    } else {
      await bot.sendMessage(chatId, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", mainMenu);
      return;
    }
  } catch (error) {
    console.error("Error handling question:", error);
    await bot.sendMessage(
      chatId,
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
      mainMenu
    );
  }
}

function waitForMessage(bot, chatId) {
  let flag = true;
  return new Promise((resolve) => {
    bot.once("message", (message) => {
      if (message.chat.id === chatId) {
        resolve(message);
      } else {
        waitForMessage(bot, chatId).then(resolve);
      }
    });
  });
}
module.exports = {
  handleQuestion,
  handleRegistration,
  handleFeedback,
  waitForMessage,
};
